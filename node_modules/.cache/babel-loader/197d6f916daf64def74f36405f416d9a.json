{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Tween from 'rc-tween-one/es/Tween';\nimport { stylesToCss } from 'style-utils';\nimport { currentScrollTop, toArrayChildren, windowHeight } from './utils';\nimport animType from './anim';\n\nvar BgElement = function (_React$Component) {\n  _inherits(BgElement, _React$Component);\n\n  function BgElement(props) {\n    _classCallCheck(this, BgElement);\n\n    var _this = _possibleConstructorReturn(this, (BgElement.__proto__ || Object.getPrototypeOf(BgElement)).call(this, props));\n\n    _this.onScroll = function () {\n      var scrollTop = currentScrollTop();\n\n      var domRect = _this.dom.parentNode.getBoundingClientRect();\n\n      var offsetTop = domRect.top + scrollTop;\n      var height = Math.max(domRect.height, windowHeight());\n      var elementShowHeight = scrollTop - offsetTop + height;\n      var scale = elementShowHeight / (height + domRect.height);\n      scale = scale || 0;\n      scale = scale >= 1 ? 1 : scale;\n\n      _this.tween.frame(scale * _this.scrollParallaxDuration);\n    };\n\n    _this.onResize = function () {\n      if (!_this.props.show) {\n        return;\n      }\n\n      var domRect = _this.dom.getBoundingClientRect();\n\n      var videoDomRect = _this.video.getBoundingClientRect();\n\n      _this.videoLoad = true;\n      var scale = void 0;\n      var videoRect = {\n        display: 'block',\n        position: 'relative',\n        top: 0,\n        left: 0\n      };\n\n      if (domRect.width / domRect.height > videoDomRect.width / videoDomRect.height) {\n        scale = domRect.width / videoDomRect.width;\n        videoRect.width = domRect.width;\n        videoRect.height = videoDomRect.height * scale;\n        videoRect.top = -(videoRect.height - domRect.height) / 2;\n      } else {\n        scale = domRect.height / videoDomRect.height;\n        videoRect.height = domRect.height;\n        videoRect.width = videoDomRect.width * scale;\n        videoRect.left = -(videoRect.width - domRect.width) / 2;\n      }\n\n      Object.keys(videoRect).forEach(function (key) {\n        _this.video.style[key] = stylesToCss(key, videoRect[key]);\n      });\n    };\n\n    _this.videoLoadedData = function () {\n      _this.onResize();\n\n      if (window.addEventListener) {\n        window.addEventListener('resize', _this.onResize);\n      } else {\n        window.attachEvent('onresize', _this.onResize);\n      }\n    };\n\n    _this.isVideo = toArrayChildren(_this.props.children).some(function (item) {\n      return item.type === 'video';\n    });\n\n    if (_this.isVideo) {\n      // 如果是 video，删除 grid 系列，位置发生变化，重加载了 video;\n      delete animType.grid;\n      delete animType.gridBar;\n    }\n\n    if (_this.props.scrollParallax) {\n      _this.scrollParallaxDuration = _this.props.scrollParallax.duration || 450;\n    }\n\n    _this.video = null;\n    _this.videoLoad = false;\n    return _this;\n  }\n\n  _createClass(BgElement, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.dom = ReactDOM.findDOMNode(this);\n\n      if (!this.videoLoad) {\n        if (this.video && this.props.videoResize) {\n          this.video.onloadeddata = this.videoLoadedData;\n        }\n      }\n\n      if (this.props.scrollParallax) {\n        this.tween = new Tween(this.dom, [_extends({\n          ease: 'linear'\n        }, this.props.scrollParallax)], {\n          attr: 'style'\n        });\n        this.tween.frame(0);\n        this.onScroll();\n\n        if (window.addEventListener) {\n          window.addEventListener('scroll', this.onScroll);\n        } else {\n          window.attachEvent('onscroll', this.onScroll);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.show) {\n        // 取 dom 在 render 之后；\n        setTimeout(function () {\n          if (_this2.video && _this2.props.videoResize && _this2.videoLoad) {\n            _this2.onResize();\n          }\n\n          if (_this2.props.scrollParallax) {\n            _this2.onScroll();\n          }\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (window.addEventListener) {\n        window.removeEventListener('resize', this.onResize);\n        window.removeEventListener('scroll', this.onScroll);\n      } else {\n        window.detachEvent('onresize', this.onResize);\n        window.detachEvent('onscroll', this.onScroll);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var props = _extends({}, this.props, this.props.componentProps);\n\n      ['videoResize', 'scrollParallax', 'scrollParallaxDuration', 'show', 'component', 'componentProps'].forEach(function (key) {\n        return delete props[key];\n      });\n\n      if (this.isVideo && this.props.videoResize) {\n        var children = toArrayChildren(props.children).map(function (item, i) {\n          return React.cloneElement(item, _extends({}, item.props, {\n            key: item.key || 'bg-video-' + i,\n            ref: function ref(c) {\n              _this3.video = c;\n\n              if (typeof item.ref === 'function') {\n                item.ref(c);\n              }\n            }\n          }));\n        });\n        props.children = children.length === 1 ? children[0] : children;\n      }\n\n      return React.createElement(this.props.component, props);\n    }\n  }]);\n\n  return BgElement;\n}(React.Component);\n\nexport default BgElement;\nBgElement.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  children: PropTypes.any,\n  component: PropTypes.any,\n  videoResize: PropTypes.bool,\n  scrollParallax: PropTypes.object,\n  show: PropTypes.bool,\n  componentProps: PropTypes.object\n};\nBgElement.defaultProps = {\n  component: 'div',\n  videoResize: true,\n  componentProps: {}\n};\nBgElement.isBannerAnimBgElement = true;","map":null,"metadata":{},"sourceType":"module"}