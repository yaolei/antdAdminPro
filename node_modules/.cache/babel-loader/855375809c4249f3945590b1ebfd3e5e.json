{"ast":null,"code":"var _class, _class2, _temp;\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * @fileOverview TreemapChart\n */\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Smooth from 'react-smooth';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport Surface from '../container/Surface';\nimport Layer from '../container/Layer';\nimport Rectangle from '../shape/Rectangle';\nimport { findChildByType, getPresentationAttributes, filterSvgElements, validateWidthHeight, isSsr } from '../util/ReactUtils';\nimport Tooltip from '../component/Tooltip';\nimport pureRender from '../util/PureRender';\nimport { getValueByDataKey } from '../util/ChartUtils';\n\nvar computeNode = function computeNode(_ref) {\n  var depth = _ref.depth,\n      node = _ref.node,\n      index = _ref.index,\n      valueKey = _ref.valueKey;\n  var children = node.children;\n  var childDepth = depth + 1;\n  var computedChildren = children && children.length ? children.map(function (child, i) {\n    return computeNode({\n      depth: childDepth,\n      node: child,\n      index: i,\n      valueKey: valueKey\n    });\n  }) : null;\n  var value;\n\n  if (children && children.length) {\n    value = computedChildren.reduce(function (result, child) {\n      return result + child.value;\n    }, 0);\n  } else {\n    value = _.isNaN(node[valueKey]) || node[valueKey] <= 0 ? 0 : node[valueKey];\n  }\n\n  return _objectSpread({}, node, {\n    children: computedChildren,\n    value: value,\n    depth: depth,\n    index: index\n  });\n};\n\nvar filterRect = function filterRect(node) {\n  return {\n    x: node.x,\n    y: node.y,\n    width: node.width,\n    height: node.height\n  };\n}; // Compute the area for each child based on value & scale.\n\n\nvar getAreaOfChildren = function getAreaOfChildren(children, areaValueRatio) {\n  var ratio = areaValueRatio < 0 ? 0 : areaValueRatio;\n  return children.map(function (child) {\n    var area = child.value * ratio;\n    return _objectSpread({}, child, {\n      area: _.isNaN(area) || area <= 0 ? 0 : area\n    });\n  });\n}; // Computes the score for the specified row, as the worst aspect ratio.\n\n\nvar getWorstScore = function getWorstScore(row, parentSize, aspectRatio) {\n  var parentArea = parentSize * parentSize;\n  var rowArea = row.area * row.area;\n\n  var _row$reduce = row.reduce(function (result, child) {\n    return {\n      min: Math.min(result.min, child.area),\n      max: Math.max(result.max, child.area)\n    };\n  }, {\n    min: Infinity,\n    max: 0\n  }),\n      min = _row$reduce.min,\n      max = _row$reduce.max;\n\n  return rowArea ? Math.max(parentArea * max * aspectRatio / rowArea, rowArea / (parentArea * min * aspectRatio)) : Infinity;\n};\n\nvar horizontalPosition = function horizontalPosition(row, parentSize, parentRect, isFlush) {\n  var rowHeight = parentSize ? Math.round(row.area / parentSize) : 0;\n\n  if (isFlush || rowHeight > parentRect.height) {\n    rowHeight = parentRect.height;\n  }\n\n  var curX = parentRect.x;\n  var child;\n\n  for (var i = 0, len = row.length; i < len; i++) {\n    child = row[i];\n    child.x = curX;\n    child.y = parentRect.y;\n    child.height = rowHeight;\n    child.width = Math.min(rowHeight ? Math.round(child.area / rowHeight) : 0, parentRect.x + parentRect.width - curX);\n    curX += child.width;\n  } // what's z\n\n\n  child.z = true; // add the remain x to the last one of row\n\n  child.width += parentRect.x + parentRect.width - curX;\n  return _objectSpread({}, parentRect, {\n    y: parentRect.y + rowHeight,\n    height: parentRect.height - rowHeight\n  });\n};\n\nvar verticalPosition = function verticalPosition(row, parentSize, parentRect, isFlush) {\n  var rowWidth = parentSize ? Math.round(row.area / parentSize) : 0;\n\n  if (isFlush || rowWidth > parentRect.width) {\n    rowWidth = parentRect.width;\n  }\n\n  var curY = parentRect.y;\n  var child;\n\n  for (var i = 0, len = row.length; i < len; i++) {\n    child = row[i];\n    child.x = parentRect.x;\n    child.y = curY;\n    child.width = rowWidth;\n    child.height = Math.min(rowWidth ? Math.round(child.area / rowWidth) : 0, parentRect.y + parentRect.height - curY);\n    curY += child.height;\n  }\n\n  child.z = false;\n  child.height += parentRect.y + parentRect.height - curY;\n  return _objectSpread({}, parentRect, {\n    x: parentRect.x + rowWidth,\n    width: parentRect.width - rowWidth\n  });\n};\n\nvar position = function position(row, parentSize, parentRect, isFlush) {\n  if (parentSize === parentRect.width) {\n    return horizontalPosition(row, parentSize, parentRect, isFlush);\n  }\n\n  return verticalPosition(row, parentSize, parentRect, isFlush);\n}; // Recursively arranges the specified node's children into squarified rows.\n\n\nvar squarify = function squarify(node, aspectRatio) {\n  var children = node.children;\n\n  if (children && children.length) {\n    var rect = filterRect(node);\n    var row = [];\n    var best = Infinity; // the best row score so far\n\n    var child, score; // the current row score\n\n    var size = Math.min(rect.width, rect.height); // initial orientation\n\n    var scaleChildren = getAreaOfChildren(children, rect.width * rect.height / node.value);\n    var tempChildren = scaleChildren.slice();\n    row.area = 0;\n\n    while (tempChildren.length > 0) {\n      // row first\n      // eslint-disable-next-line prefer-destructuring\n      row.push(child = tempChildren[0]);\n      row.area += child.area;\n      score = getWorstScore(row, size, aspectRatio);\n\n      if (score <= best) {\n        // continue with this orientation\n        tempChildren.shift();\n        best = score;\n      } else {\n        // abort, and try a different orientation\n        row.area -= row.pop().area;\n        rect = position(row, size, rect, false);\n        size = Math.min(rect.width, rect.height);\n        row.length = row.area = 0;\n        best = Infinity;\n      }\n    }\n\n    if (row.length) {\n      rect = position(row, size, rect, true);\n      row.length = row.area = 0;\n    }\n\n    return _objectSpread({}, node, {\n      children: scaleChildren.map(function (c) {\n        return squarify(c, aspectRatio);\n      })\n    });\n  }\n\n  return node;\n};\n\nvar Treemap = pureRender(_class = (_temp = _class2 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Treemap, _Component);\n\n  function Treemap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Treemap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Treemap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = _this.constructor.createDefaultState();\n    return _this;\n  }\n\n  _createClass(Treemap, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.data !== this.props.data) {\n        this.setState(this.constructor.createDefaultState());\n      }\n    }\n    /**\n     * Returns default, reset state for the treemap chart.\n     * @return {Object} Whole new state\n     */\n\n  }, {\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(node, e) {\n      var _this$props = this.props,\n          onMouseEnter = _this$props.onMouseEnter,\n          children = _this$props.children;\n      var tooltipItem = findChildByType(children, Tooltip);\n\n      if (tooltipItem) {\n        this.setState({\n          isTooltipActive: true,\n          activeNode: node\n        }, function () {\n          if (onMouseEnter) {\n            onMouseEnter(node, e);\n          }\n        });\n      } else if (onMouseEnter) {\n        onMouseEnter(node, e);\n      }\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(node, e) {\n      var _this$props2 = this.props,\n          onMouseLeave = _this$props2.onMouseLeave,\n          children = _this$props2.children;\n      var tooltipItem = findChildByType(children, Tooltip);\n\n      if (tooltipItem) {\n        this.setState({\n          isTooltipActive: false,\n          activeNode: null\n        }, function () {\n          if (onMouseLeave) {\n            onMouseLeave(node, e);\n          }\n        });\n      } else if (onMouseLeave) {\n        onMouseLeave(node, e);\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(node) {\n      var onClick = this.props.onClick;\n\n      if (onClick) {\n        onClick(node);\n      }\n    }\n  }, {\n    key: \"renderAnimatedItem\",\n    value: function renderAnimatedItem(content, nodeProps, isLeaf) {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          isAnimationActive = _this$props3.isAnimationActive,\n          animationBegin = _this$props3.animationBegin,\n          animationDuration = _this$props3.animationDuration,\n          animationEasing = _this$props3.animationEasing,\n          isUpdateAnimationActive = _this$props3.isUpdateAnimationActive;\n      var width = nodeProps.width,\n          height = nodeProps.height,\n          x = nodeProps.x,\n          y = nodeProps.y;\n      var translateX = parseInt((Math.random() * 2 - 1) * width, 10);\n      var event = {};\n\n      if (isLeaf) {\n        event = {\n          onMouseEnter: this.handleMouseEnter.bind(this, nodeProps),\n          onMouseLeave: this.handleMouseLeave.bind(this, nodeProps),\n          onClick: this.handleClick.bind(this, nodeProps)\n        };\n      }\n\n      return React.createElement(Smooth, {\n        from: {\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        },\n        to: {\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        },\n        duration: animationDuration,\n        easing: animationEasing,\n        isActive: isUpdateAnimationActive\n      }, function (_ref2) {\n        var currX = _ref2.x,\n            currY = _ref2.y,\n            currWidth = _ref2.width,\n            currHeight = _ref2.height;\n        return React.createElement(Smooth, {\n          from: \"translate(\".concat(translateX, \"px, \").concat(translateX, \"px)\"),\n          to: \"translate(0, 0)\",\n          attributeName: \"transform\",\n          begin: animationBegin,\n          easing: animationEasing,\n          isActive: isAnimationActive,\n          duration: animationDuration\n        }, React.createElement(Layer, event, _this2.constructor.renderContentItem(content, _objectSpread({}, nodeProps, {\n          isAnimationActive: isAnimationActive,\n          isUpdateAnimationActive: !isUpdateAnimationActive,\n          width: currWidth,\n          height: currHeight,\n          x: currX,\n          y: currY\n        }))));\n      });\n    }\n  }, {\n    key: \"renderNode\",\n    value: function renderNode(root, node, i) {\n      var _this3 = this;\n\n      var content = this.props.content;\n\n      var nodeProps = _objectSpread({}, getPresentationAttributes(this.props), node, {\n        root: root\n      });\n\n      var isLeaf = !node.children || !node.children.length;\n      return React.createElement(Layer, {\n        key: \"recharts-treemap-node-\".concat(i),\n        className: \"recharts-treemap-depth-\".concat(node.depth)\n      }, this.renderAnimatedItem(content, nodeProps, isLeaf), node.children && node.children.length ? node.children.map(function (child, index) {\n        return _this3.renderNode(node, child, index);\n      }) : null);\n    }\n  }, {\n    key: \"renderAllNodes\",\n    value: function renderAllNodes() {\n      var _this$props4 = this.props,\n          width = _this$props4.width,\n          height = _this$props4.height,\n          data = _this$props4.data,\n          dataKey = _this$props4.dataKey,\n          aspectRatio = _this$props4.aspectRatio;\n      var root = computeNode({\n        depth: 0,\n        node: {\n          children: data,\n          x: 0,\n          y: 0,\n          width: width,\n          height: height\n        },\n        index: 0,\n        valueKey: dataKey\n      });\n      var formatRoot = squarify(root, aspectRatio);\n      return this.renderNode(formatRoot, formatRoot, 0);\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          nameKey = _this$props5.nameKey;\n      var tooltipItem = findChildByType(children, Tooltip);\n\n      if (!tooltipItem) {\n        return null;\n      }\n\n      var _this$props6 = this.props,\n          width = _this$props6.width,\n          height = _this$props6.height,\n          dataKey = _this$props6.dataKey;\n      var _this$state = this.state,\n          isTooltipActive = _this$state.isTooltipActive,\n          activeNode = _this$state.activeNode;\n      var viewBox = {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      };\n      var coordinate = activeNode ? {\n        x: activeNode.x + activeNode.width / 2,\n        y: activeNode.y + activeNode.height / 2\n      } : null;\n      var payload = isTooltipActive && activeNode ? [{\n        payload: activeNode,\n        name: getValueByDataKey(activeNode, nameKey, ''),\n        value: getValueByDataKey(activeNode, dataKey)\n      }] : [];\n      return React.cloneElement(tooltipItem, {\n        viewBox: viewBox,\n        active: isTooltipActive,\n        coordinate: coordinate,\n        label: '',\n        payload: payload\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!validateWidthHeight(this)) {\n        return null;\n      }\n\n      var _this$props7 = this.props,\n          width = _this$props7.width,\n          height = _this$props7.height,\n          className = _this$props7.className,\n          style = _this$props7.style,\n          children = _this$props7.children,\n          others = _objectWithoutProperties(_this$props7, [\"width\", \"height\", \"className\", \"style\", \"children\"]);\n\n      var attrs = getPresentationAttributes(others);\n      return React.createElement(\"div\", {\n        className: classNames('recharts-wrapper', className),\n        style: _objectSpread({}, style, {\n          position: 'relative',\n          cursor: 'default',\n          width: width,\n          height: height\n        })\n      }, React.createElement(Surface, _extends({}, attrs, {\n        width: width,\n        height: height\n      }), this.renderAllNodes(), filterSvgElements(children)), this.renderTooltip());\n    }\n  }], [{\n    key: \"createDefaultState\",\n    value: function createDefaultState() {\n      return {\n        isTooltipActive: false,\n        activeNode: null\n      };\n    }\n  }, {\n    key: \"renderContentItem\",\n    value: function renderContentItem(content, nodeProps) {\n      if (React.isValidElement(content)) {\n        return React.cloneElement(content, nodeProps);\n      }\n\n      if (_.isFunction(content)) {\n        return content(nodeProps);\n      }\n\n      return React.createElement(Rectangle, _extends({\n        fill: \"#fff\",\n        stroke: \"#000\"\n      }, nodeProps));\n    }\n  }]);\n\n  return Treemap;\n}(Component), _class2.displayName = 'Treemap', _class2.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.array,\n  style: PropTypes.object,\n  aspectRatio: PropTypes.number,\n  content: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  fill: PropTypes.string,\n  stroke: PropTypes.string,\n  className: PropTypes.string,\n  nameKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  dataKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onClick: PropTypes.func,\n  isAnimationActive: PropTypes.bool,\n  isUpdateAnimationActive: PropTypes.bool,\n  animationBegin: PropTypes.number,\n  animationDuration: PropTypes.number,\n  animationEasing: PropTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])\n}, _class2.defaultProps = {\n  dataKey: 'value',\n  aspectRatio: 0.5 * (1 + Math.sqrt(5)),\n  isAnimationActive: !isSsr(),\n  isUpdateAnimationActive: !isSsr(),\n  animationBegin: 0,\n  animationDuration: 1500,\n  animationEasing: 'linear'\n}, _temp)) || _class;\n\nexport default Treemap;","map":null,"metadata":{},"sourceType":"module"}