{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ticker from 'rc-tween-one/es/ticker';\nimport Arrow from './Arrow';\nimport Thumb from './Thumb';\nimport { toArrayChildren, dataToArray } from './utils';\nimport animType from './anim';\n\nvar BannerAnim = function (_Component) {\n  _inherits(BannerAnim, _Component);\n\n  function BannerAnim(props) {\n    _classCallCheck(this, BannerAnim);\n\n    var _this = _possibleConstructorReturn(this, (BannerAnim.__proto__ || Object.getPrototypeOf(BannerAnim)).call(this, props));\n\n    _this.onMouseEnter = function (e) {\n      _this.props.onMouseEnter(e);\n\n      if (_this.props.autoPlay) {\n        ticker.clear(_this.autoPlayId);\n        _this.autoPlayId = -1;\n      }\n    };\n\n    _this.onMouseLeave = function (e) {\n      _this.props.onMouseLeave(e);\n\n      if (_this.props.autoPlay) {\n        _this.autoPlay();\n      }\n    };\n\n    _this.onTouchStart = function (e) {\n      if (e.touches && e.touches.length > 1 || _this.elemWrapper.length <= 1 || _this.getDomIsArrowOrThumb(e) || e.button === 2) {\n        return;\n      }\n\n      if (_this.props.autoPlay) {\n        ticker.clear(_this.autoPlayId);\n        _this.autoPlayId = -1;\n      }\n\n      _this.animType = _this.getAnimType(_this.props.type);\n      _this.currentShow = _this.state.currentShow; // this.mouseMoveType = 'start';\n\n      _this.mouseStartXY = {\n        startX: e.touches === undefined ? e.clientX : e.touches[0].clientX,\n        startY: e.touches === undefined ? e.clientY : e.touches[0].clientY\n      };\n    };\n\n    _this.onTouchMove = function (e) {\n      if (!_this.mouseStartXY || e.touches && e.touches.length > 1) {\n        return;\n      }\n\n      var currentX = e.touches === undefined ? e.clientX : e.touches[0].clientX;\n      var differX = currentX - _this.mouseStartXY.startX;\n\n      if (!differX) {\n        return;\n      }\n\n      var ratio = differX / _this.state.domRect.width * 2;\n      var ratioType = _this.ratioType;\n      var currentShow = _this.currentShow;\n\n      if (ratio > 0) {\n        ratioType = '+';\n      } else {\n        ratioType = '-';\n      }\n\n      _this.mouseMoveType = 'update';\n\n      if (_this.ratioType !== ratioType) {\n        _this.ratioType = ratioType;\n        _this.mouseMoveType = 'reChild';\n\n        _this.setState({\n          currentShow: currentShow\n        });\n\n        return;\n      }\n\n      _this.ratio = ratio;\n\n      if (_this.ratio) {\n        var type = void 0;\n\n        if (_this.ratio > 0) {\n          currentShow += 1;\n          type = 'next';\n        } else {\n          currentShow -= 1;\n          type = 'prev';\n        }\n\n        _this.ratio = Math.abs(_this.ratio);\n        _this.ratio = _this.ratio > 1 ? 1 : _this.ratio;\n        currentShow = currentShow >= _this.elemWrapper.length ? 0 : currentShow;\n        currentShow = currentShow < 0 ? _this.elemWrapper.length - 1 : currentShow;\n\n        _this.setState({\n          currentShow: currentShow,\n          direction: type\n        });\n      }\n    };\n\n    _this.onTouchEnd = function (e) {\n      if (!_this.mouseStartXY || e.changedTouches && e.changedTouches.length > 1) {\n        return;\n      }\n\n      if (_this.props.autoPlay && _this.autoPlayId === -1) {\n        _this.autoPlay();\n      }\n\n      var currentX = e.changedTouches === undefined ? e.clientX : e.changedTouches[0].clientX;\n      var differX = currentX - _this.mouseStartXY.startX;\n      delete _this.mouseStartXY;\n      _this.mouseMoveType = 'end';\n\n      if (!differX) {\n        _this.mouseMoveType = '';\n        return;\n      }\n\n      if (_this.ratio > 0.3) {\n        _this.forceUpdate(function () {\n          _this.ratio = 0;\n          _this.mouseMoveType = '';\n        });\n      } else {\n        _this.setState({\n          currentShow: _this.currentShow,\n          direction: _this.ratioType === '+' ? 'prev' : 'next'\n        }, function () {\n          _this.ratio = 0;\n          _this.mouseMoveType = '';\n        });\n      }\n    };\n\n    _this.getDomIsArrowOrThumb = function (e) {\n      var arrowClassName = e.target.className;\n      var thumbClassName = e.target.parentNode.className;\n\n      if (arrowClassName.indexOf('banner-anim-arrow') >= 0 || thumbClassName.indexOf('banner-anim-thumb') >= 0) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.getRenderChildren = function (children) {\n      var elem = [];\n      var arrow = [];\n      var thumb = void 0;\n      var elementKeyNum = 0;\n      var thumbKeyNum = 0;\n      toArrayChildren(children).forEach(function (item, i) {\n        if (!item) {\n          return;\n        }\n\n        var itemProps = _extends({}, item.props);\n\n        if (item.type.isBannerAnimElement) {\n          itemProps.key = item.key || 'element-' + elementKeyNum;\n          elementKeyNum += 1;\n          itemProps.callBack = _this.animEnd;\n          itemProps.show = _this.state.currentShow === i;\n          itemProps.animType = _this.animType;\n          itemProps.duration = _this.props.duration;\n          itemProps.delay = _this.props.delay;\n          itemProps.ease = _this.props.ease;\n          itemProps.sync = _this.props.sync || itemProps.sync;\n          itemProps.elemOffset = {\n            top: _this.state.domRect.top,\n            width: _this.state.domRect.width,\n            height: _this.state.wrapperHeight\n          };\n          itemProps.direction = _this.state.direction;\n          itemProps.ratio = _this.ratio;\n          itemProps.mouseMoveType = _this.mouseMoveType;\n          elem.push(React.cloneElement(item, itemProps));\n        } else if (item.type.isBannerAnimArrow) {\n          itemProps.next = _this.next;\n          itemProps.prev = _this.prev;\n          itemProps.key = item.key || itemProps.arrowType;\n          itemProps.elemHeight = _this.state.wrapperHeight;\n          arrow.push(React.cloneElement(item, itemProps));\n        } else if (item.type.isBannerAnimThumb) {\n          itemProps.key = item.key || 'thumb-' + thumbKeyNum;\n          thumbKeyNum += 1;\n          itemProps.thumbClick = _this.slickGoTo;\n          itemProps.active = _this.state.currentShow;\n          thumb = React.cloneElement(item, itemProps);\n        }\n      });\n\n      if (elem.length > 1) {\n        if (!arrow.length && _this.props.arrow) {\n          arrow.push(React.createElement(Arrow, {\n            arrowType: 'prev',\n            key: 'arrowPrev',\n            next: _this.next,\n            prev: _this.prev,\n            'default': true,\n            elemHeight: _this.state.wrapperHeight\n          }), React.createElement(Arrow, {\n            arrowType: 'next',\n            key: 'arrowNext',\n            next: _this.next,\n            prev: _this.prev,\n            'default': true,\n            elemHeight: _this.state.wrapperHeight\n          }));\n        }\n\n        if (!thumb && _this.props.thumb) {\n          thumb = React.createElement(Thumb, {\n            length: elem.length,\n            key: 'thumb',\n            thumbClick: _this.slickGoTo,\n            active: _this.state.currentShow,\n            'default': true\n          });\n        }\n      }\n\n      _this.elemWrapper = elem;\n      return elem.concat(arrow, thumb);\n    };\n\n    _this.getDomDataSetToState = function () {\n      _this.dom = ReactDOM.findDOMNode(_this);\n\n      var domRect = _this.dom.getBoundingClientRect(); // 获取宽度与定位，setState刷新；\n\n\n      var wrapperHeight = _this.getElementHeight(_this.dom.getElementsByClassName('banner-anim-elem'));\n\n      _this.setState({\n        wrapperHeight: wrapperHeight,\n        domRect: domRect\n      });\n\n      _this.tweenBool = false;\n    };\n\n    _this.getElementHeight = function (children) {\n      var height = 0;\n\n      for (var i = 0; i < children.length; i++) {\n        var dom = children[i];\n        var _height = dom.getBoundingClientRect().height;\n        height = height > _height ? height : _height;\n      }\n\n      return height;\n    };\n\n    _this.getAnimType = function (type) {\n      var typeArray = type ? dataToArray(type) : Object.keys(animType);\n      var random = Math.round(Math.random() * (typeArray.length - 1));\n      return animType[typeArray[random]];\n    };\n\n    _this.autoPlay = function () {\n      _this.autoPlayId = ticker.interval(_this.next, _this.props.autoPlaySpeed);\n    };\n\n    _this.animTweenStart = function (show, type) {\n      _this.animType = _this.getAnimType(_this.props.type);\n\n      _this.props.onChange('before', show);\n\n      _this.setState({\n        currentShow: show,\n        direction: type\n      });\n    };\n\n    _this.animEnd = function (type) {\n      if (type === 'enter') {\n        _this.tweenBool = false;\n\n        _this.props.onChange('after', _this.state.currentShow);\n      }\n    };\n\n    _this.next = function () {\n      if (!_this.tweenBool) {\n        _this.tweenBool = true;\n        var newShow = _this.state.currentShow;\n        newShow++;\n\n        if (newShow >= _this.elemWrapper.length) {\n          newShow = 0;\n        }\n\n        _this.animTweenStart(newShow, 'next');\n      }\n    };\n\n    _this.prev = function () {\n      if (!_this.tweenBool) {\n        _this.tweenBool = true;\n        var newShow = _this.state.currentShow;\n        newShow--;\n\n        if (newShow < 0) {\n          newShow = _this.elemWrapper.length - 1;\n        }\n\n        _this.animTweenStart(newShow, 'prev');\n      }\n    };\n\n    _this.slickGoTo = function (i) {\n      if (!_this.tweenBool && i !== _this.state.currentShow) {\n        _this.tweenBool = true;\n        var type = i > _this.state.currentShow ? 'next' : 'prev';\n\n        _this.animTweenStart(i, type);\n      }\n    };\n\n    _this.state = {\n      currentShow: _this.props.initShow,\n      direction: null,\n      wrapperHeight: 0,\n      domRect: {}\n    };\n    _this.tweenBool = false;\n    return _this;\n  }\n\n  _createClass(BannerAnim, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.getDomDataSetToState();\n\n      if (window.addEventListener) {\n        window.addEventListener('touchend', this.onTouchEnd);\n        window.addEventListener('mouseup', this.onTouchEnd);\n        window.addEventListener('resize', this.getDomDataSetToState);\n      } else {\n        window.attachEvent('ontouchend', this.onTouchEnd);\n        window.attachEvent('onmouseup', this.onTouchEnd);\n        window.attachEvent('onresize', this.getDomDataSetToState);\n      }\n\n      if (this.props.autoPlay) {\n        this.autoPlay();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps() {\n      this.tweenBool = false;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.autoPlayId) {\n        ticker.clear(this.autoPlayId);\n        this.autoPlayId = 0;\n      }\n\n      if (window.addEventListener) {\n        window.removeEventListener('touchend', this.onTouchEnd);\n        window.removeEventListener('mouseup', this.onTouchEnd);\n        window.removeEventListener('resize', this.getDomDataSetToState);\n      } else {\n        window.detachEvent('ontouchend', this.onTouchEnd);\n        window.attachEvent('onmouseup', this.onTouchEnd);\n        window.detachEvent('onresize', this.getDomDataSetToState);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var prefixCls = this.props.prefixCls;\n\n      var props = _extends({}, this.props);\n\n      ['type', 'prefixCls', 'component', 'initShow', 'duration', 'delay', 'ease', 'arrow', 'thumb', 'autoPlaySpeed', 'autoPlay', 'thumbFloat', 'sync', 'dragPlay'].forEach(function (key) {\n        return delete props[key];\n      });\n      var childrenToRender = this.getRenderChildren(props.children);\n      props.className = (props.className + ' ' + (prefixCls || '')).trim();\n      props.style = _extends({}, props.style);\n      props.onMouseEnter = this.onMouseEnter;\n      props.onMouseLeave = this.onMouseLeave;\n\n      if (childrenToRender.length > 1 && this.props.dragPlay) {\n        props.onTouchStart = this.onTouchStart;\n        props.onMouseDown = this.onTouchStart;\n        props.onTouchMove = this.onTouchMove;\n        props.onMouseMove = this.onTouchMove;\n        props.onTouchEnd = this.onTouchEnd;\n        props.onMouseUp = this.onTouchEnd;\n      }\n\n      return React.createElement(this.props.component, props, childrenToRender);\n    }\n  }]);\n\n  return BannerAnim;\n}(Component);\n\nBannerAnim.propTypes = {\n  children: PropTypes.any,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  component: PropTypes.any,\n  arrow: PropTypes.bool,\n  thumb: PropTypes.bool,\n  initShow: PropTypes.number,\n  type: PropTypes.any,\n  duration: PropTypes.number,\n  delay: PropTypes.number,\n  ease: PropTypes.string,\n  autoPlay: PropTypes.bool,\n  autoPlaySpeed: PropTypes.number,\n  onChange: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  sync: PropTypes.bool,\n  dragPlay: PropTypes.bool\n};\nBannerAnim.defaultProps = {\n  component: 'div',\n  className: 'banner-anim',\n  initShow: 0,\n  duration: 450,\n  delay: 0,\n  ease: 'easeInOutQuad',\n  arrow: true,\n  thumb: true,\n  autoPlaySpeed: 5000,\n  dragPlay: true,\n  onChange: function onChange() {},\n  onMouseEnter: function onMouseEnter() {},\n  onMouseLeave: function onMouseLeave() {}\n};\nBannerAnim.isBannerAnim = true;\nexport default BannerAnim;","map":null,"metadata":{},"sourceType":"module"}